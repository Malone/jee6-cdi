#summary Dependency Injection - An Introductory Tutorial
#sidebar TOCArticlesDependencyInjectionAnIntroductoryTutorial

<h1> Dependency Injection - An Introductory Tutorial </h1>


<wiki:toc max_depth="5" />


= Introduction =

This article discusses dependency injection in a tutorial format. It covers some of the features of CDI such as type safe annotations configuration, alternatives and more. 

[http://jcp.org/aboutJava/communityprocess/final/jsr299/index.html CDI] is the Java standard for dependency injection and interception (AOP). It is evident from the popularity of DI and AOP that Java needs to address DI and AOP so that it can build other standards on top of it. DI and AOP are the foundation of many Java frameworks.

CDI is a foundational aspect of Java EE 6. It is or will be shortly supported by Caucho's Resin, IBM's !WebSphere, Oracle's Glassfish, Red Hat's JBoss and many more application servers. CDI is similar to core Spring and Guice frameworks. Like JPA did for ORM, CDI simplifies and sanitizes the API for DI and AOP. If you have worked with Spring or Guice, you find CDI easy to use and easy to learn.

It is no accident that this tutorial follows this tutorial [http://java.dzone.com/articles/dependency-injection-an-introd (using Spring "new" DI annotations)] written three years ago. It will be interesting to compare and contrast the examples in this tutorial with the one written three years ago for Spring DI annotations.


= Dependency Injection =

Dependency Injection (DI) refers to the process of supplying an external dependency to a software component. DI can help make your code architecturally pure. It aids in design by interface as well as test-driven development by providing a consistent way to inject dependencies. For example, a data access object (DAO) may depend on a database connection. Instead of looking up the database connection with JNDI, you could inject it. 

One way to think about a DI framework like CDI is to think of JNDI turned inside out. Instead of an object looking up other objects that it needs to get its job done (dependencies), a DI container injects those dependent objects. This is the so-called Hollywood Principle, “Don't call us” (lookup objects), “we’ll call you” (inject objects). 

If you have worked with CRC cards you can think of a dependency as a collaborator, i.e., an object that another object needs to perform its role.
 
==Dependency Injection-`AutomatedTellerMachine` without CDI or Spring or Guice==

Let's say that you have an automated teller machine (ATM, also known as an automated banking machine in other countries) and it needs the ability to talk to a bank. It uses what it calls a transport object to do this. In this example, a transport object handles the low-level communication to the bank. 

This example could be represented by these two interfaces as follows: 

====Code Listing: `AutomatedTellerMachine` interface====

{{{
package org.cdi.advocacy;

import java.math.BigDecimal;

public interface AutomatedTellerMachine {

	public abstract void deposit(BigDecimal bd);

	public abstract void withdraw(BigDecimal bd);

}
}}}

====Code Listing: ATMTransport interface====
{{{
package org.cdi.advocacy;

public interface ATMTransport {
	public void communicateWithBank(byte[] datapacket);
}
}}}

Now the *`AutomatedTellerMachine`* needs a transport to perform its intent, namely withdraw money and deposit money. To carry out these tasks, the *`AutomatedTellerMachine`* may depend on many objects and collaborates with its dependencies to complete the work. 

An implementation of the *`AutomatedTellerMachine`* may look like this:

====Code Listing: AutomatedTellerMachineImpl class====
{{{
package org.cdi.advocacy;
...
public class AutomatedTellerMachineImpl implements AutomatedTellerMachine {
	
	private ATMTransport transport;
	
        ...
	public void deposit(BigDecimal bd) {
		System.out.println("deposit called");
		transport.communicateWithBank(...);
	}

	public void withdraw(BigDecimal bd) {
		System.out.println("withdraw called");
		transport.communicateWithBank(...);
	}

}

}}}

The *`AutomatedTellerMachineImpl`* does not know or care how the transport withdraws and deposits money from the bank. This level of indirection allows us to replace the transport with different implementations such as in the following example:

===Three example transports: `SoapAtmTransport`, `StandardAtmTransport` and `JsonAtmTransport`===

====Code Listing: `StandardAtmTransport`====
{{{
package org.cdi.advocacy;


public class StandardAtmTransport implements ATMTransport {

	public void communicateWithBank(byte[] datapacket) {
		System.out.println("communicating with bank via Standard transport");
                ...
	}

}
}}}

====Code Listing: `SoapAtmTransport`====
{{{
package org.cdi.advocacy;

public class SoapAtmTransport implements ATMTransport {

	public void communicateWithBank(byte[] datapacket) {
		System.out.println("communicating with bank via Soap transport");
                ...
	}

}

}}}


====Code Listing: `JsonRestAtmTransport`====
{{{
package org.cdi.advocacy;

public class JsonRestAtmTransport implements ATMTransport {

	public void communicateWithBank(byte[] datapacket) {
		System.out.println("communicating with bank via JSON REST transport");
	}

}
}}}

Notice the possible implementations of the *`ATMTransport interface`*. The `*AutomatedTellerMachineImpl*` does not know or care which transport it uses. Also, for testing and developing, instead of talking to a real bank, you could easily use Mockito or EasyMock or you could even write a *`SimulationAtmTransport`*.


The concept of DI transcends CDI, Guice and Spring. Thus, you can accomplish DI without CDI or Spring as follows: 

====Code Listing: `AtmMain`: DI without CDI, Spring or Guice====

{{{
package org.cdi.advocacy;

public class AtmMain {
        
        public void main (String[] args) {
                AutomatedTellerMachine atm = new AutomatedTellerMachineImpl();
                ATMTransport transport = new SoapAtmTransport();
                /* Inject the transport. */           
                ((AutomatedTellerMachineImpl)atm).setTransport(transport);
                
                atm.withdraw(new BigDecimal("10.00"));
                
                atm.deposit(new BigDecimal("100.00"));
        }

}
}}}

Then injecting a different *transport* is a mere matter of calling a different setter method as follows:

====Code Listing: `AtmMain`: DI without CDI, Spring or Guice: `setTransport`====
{{{
ATMTransport transport = new SimulationAtmTransport();
((AutomatedTellerMachineImpl)atm).setTransport(transport);
}}}


The above assumes we added a *`setTransport`* method to the *`AutomateTellerMachineImpl`*. Note you could just as easily use constructor arguments instead of a setter method. Thus keeping the interface of your *`AutomateTellerMachineImpl`* clean.

==Dependency Injection-`AutomatedTellerMachine` using CDI==


To use CDI to manage the dependencies you could do the following:
 # Create an empty *bean.xml* file under *META-INF* resource folder
 # Use the *@Inject* annotation to annotate a *`setTransport`* setter method in *`AutomatedTellerMachineImpl`*
 # Use the *@Default* annotation to annotate the *`StandardAtmTransport`*
 # Use the *@Alternative* to annotate the *`SoapAtmTransport`*, and *`JsonRestAtmTransport`*.
 # Use the *@Named* annotation to make the *`AutomatedTellerMachineImpl`* easy to look up; give it the name "atm"
 # Use the CDI *`beanContainer`* to look the *atm*, makes some deposits and withdraws.


===Step 1: Create an empty *bean.xml* file under *META-INF* resource folder ===
===META-INF/beans.xml===

CDI needs an bean.xml file to be in META-INF of your jar file or classpath or WEB-INF of your web application. This file can be completely empty (as in 0 bytes). If there is no beans.xml file in your META-INF or WEB-INF then that war file or jar file will not be processed by CDI. Otherwise, CDI will scan the jar and war file if the beans.xml file exists even if it is 0 bytes.

==== Code Listing: `META-INF/beans.xml` just as empty as can be====

{{{
<beans xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://java.sun.com/xml/ns/javaee
http://java.sun.com/xml/ns/javaee/beans_1_0.xsd">

</beans>
}}}

Notice that we included a starter beans.xml file with a namespace and a `<beans>` element. Although *beans.xml* could be completely empty, it is nice to have a starter file so when you need to add things (like later on in this tutorial) you can readily. Also it keeps the IDE from complaining about ill formed xml when you actually do have a 0 byte beans.xml. (I hate when the IDE complains. It is very distracting.)


===Step 2: Use the *@Inject* annotation to annotate a *`setTransport`* setter method in *`AutomatedTellerMachineImpl`*===

The *@Inject* annotation is used to mark where an injection goes. You can annotate constructor arguments, instance fields and setter methods of properties. In this example, we will annotate the *setTransport* method (which would be the setter method of the transport property).

====Code Listing: `AutomatedTellerMachineImpl` using *@Inject* to inject a transport====

{{{
package org.cdi.advocacy;

...

import javax.inject.Inject;

public class AutomatedTellerMachineImpl implements AutomatedTellerMachine {
	
	private ATMTransport transport;

	@Inject
	public void setTransport(ATMTransport transport) {
		this.transport = transport;
	}

       ...

}

}}}

By default, CDI would look for a class that implements the *`ATMTransport`* interface, once it finds this it creates an instance and injects this instance of *`ATMTransport`* using the setter method *`setTransport`*. If we only had one possible instance of *`ATMTransport`* in our classpath, we would not need to annotate any of the *`ATMTransport`* implementations. Since we have three, namely, *`StandardAtmTransport`*, *`SoapAtmTransport`*,  and *`JsonAtmTransport`*, we need to mark two of them as *`@Alternative`*s and one as *`@Default`*.

===Step 3: Use the *@Default* annotation to annotate the *`StandardAtmTransport`*===

At this stage of the example, we would like our default transport to be *`StandardAtmTransport`*; thus, we mark it as *`@Default`* as follows:.

==== Code Listing: `StandardAtmTransport` using *@Default*====
{{{
package org.cdi.advocacy;

import javax.enterprise.inject.Default;

@Default
public class StandardAtmTransport implements ATMTransport {
    ...

}}}

It should be noted that a class is @Default by default. Thus marking it so is redundant; and not only that its redundant. 

=== Step 4: Use the *@Alternative* to annotate the *`SoapAtmTransport`*, and *`JsonRestAtmTransport`*. ===

If we don't mark the others as @Alternative, they are by default as far as CDI is concerned, marked as @Default.  Let's mark *`JsonRestAtmTransport`* and *`SoapRestAtmTransport`* *@Alternative* so CDI does not get confused.

==== Code Listing: `JsonRestAtmTransport` using *@Alternative*====
{{{
package org.cdi.advocacy;

import javax.enterprise.inject.Alternative;

@Alternative
public class JsonRestAtmTransport implements ATMTransport {

...
}

}}}

==== Code Listing: `SoapAtmTransport` using *@Alternative*====
{{{
package org.cdi.advocacy;

import javax.enterprise.inject.Alternative;

@Alternative
public class SoapAtmTransport implements ATMTransport {
   ...
}

}}}


 === Step 5: Use the *@Named* annotation to make the *`AutomatedTellerMachineImpl`* easy to look up; give it the name "atm"===

Since we are not using `AutomatedTellerMachineImpl` from a Java EE 6 application, let's just use the *`beanContainer`* to look it up. Let's give it an easy logical name like "atm". To give it a name, use the @Named annotation. The @Named annotation is also used by JEE 6 application to make the bean accessible via the Universal EL (EL stands for Expression language and it gets used by JSPs and JSF components).

Here is an example of using @Named to give the *`AutomatedTellerMachineImpl`* the name "atm"as follows:

==== Code Listing: `AutomatedTellerMachineImpl` using *@Named*====
{{{
package org.cdi.advocacy;

import java.math.BigDecimal;

import javax.inject.Inject;
import javax.inject.Named;

@Named("atm")
public class AutomatedTellerMachineImpl implements AutomatedTellerMachine {
       ...

}
}}}



=== Step 6: Use the CDI *`beanContainer`* to look up the *atm*, makes some deposits and withdraws. ===

Lastly we want to look up the *atm* using the *`beanContainer`* and make some deposits.
 
==== Code Listing: `AtmMain` looking up the atm ====
{{{
package org.cdi.advocacy;

...

public class AtmMain {

        ...
        ...

	public static void main(String[] args) throws Exception {
		AutomatedTellerMachine atm = (AutomatedTellerMachine) beanContainer
				.getBeanByName("atm");

		atm.deposit(new BigDecimal("1.00"));

	}

}
}}}

When you run it from the command line, you should get the following:

{{{
deposit called
communicating with bank via Standard transport
}}}

If you remove the *@Default* from the *`StandardATMTransport`*, you will get the same output.
If you remove the *@Alternative* from both of the other transports, namely,  *`JsonATMTransport`*, and  *`SoapATMTransport`*, CDI will croak as follows:

{{{
Exception in thread "main" java.lang.ExceptionInInitializerError
Caused by: javax.enterprise.inject.AmbiguousResolutionException: org.cdi.advocacy.AutomatedTellerMachineImpl.setTransport: Too many beans match, because they all have equal precedence.  See the @Stereotype and <enable> tags to choose a precedence.  Beans:
    ManagedBeanImpl[JsonRestAtmTransport, {@Default(), @Any()}]
    ManagedBeanImpl[SoapAtmTransport, {@Default(), @Any()}]
    ManagedBeanImpl[StandardAtmTransport, {@javax.enterprise.inject.Default(), @Any()}]
   ...
}}} 

==Using @Inject to inject via constructor args and fields==
==Using @Alternative to select an Alternative==
==Using @Qualifier to inject different types==
==Using @Instance to inject all transports==
==Understanding Stereo types==
==Using @Produces==
==Configuring transports via annotations and @Produces==
==Scopes and lifecycle==